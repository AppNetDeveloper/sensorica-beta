require('dotenv').config({ path: '../.env' });
const mqtt = require('mqtt');
const mysql = require('mysql2/promise');
const axios = require('axios'); // Usamos axios para las solicitudes HTTP
const { promisify } = require('util');
const setIntervalAsync = promisify(setInterval); // Usar una versi√≥n async-friendly de setInterval

// Configuraci√≥n de MQTT y base de datos
const mqttServer = process.env.MQTT_SENSORICA_SERVER;
const mqttPort = process.env.MQTT_SENSORICA_PORT;
const dbConfig = {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USERNAME,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE
};

let mqttClient;
let isMqttConnected = false;
let dbConnection;
// Usar un Set para subscribedTopics hace m√°s eficiente la comprobaci√≥n de existencia
let subscribedTopics = new Set();
// Usar un Map para valueCounters. Guardar√°: { count, lastValue, repNumber, config }
let valueCounters = new Map();

// Funci√≥n para obtener la fecha y hora actual en formato<y_bin_46>-MM-DD HH:mm:ss
function getCurrentTimestamp() {
    // Ajustado para formato ISO y zona horaria local si es necesario
    return new Date().toLocaleString('sv-SE'); // sv-SE da<y_bin_46>-MM-DD HH:MM:SS
}

function connectMQTT() {
    const clientId = `mqtt_client_${Math.random().toString(16).substr(2, 8)}`;
    console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Intentando conectar a MQTT Server: ${mqttServer}:${mqttPort} con ClientID: ${clientId}`);

    // Limpiar manejadores de eventos anteriores si existieran (importante en reconexiones)
    if (mqttClient) {
        mqttClient.removeAllListeners();
    }

    mqttClient = mqtt.connect(`mqtt://${mqttServer}:${mqttPort}`, {
        clientId,
        reconnectPeriod: 5000, // Intentar reconectar cada 5 segundos
        connectTimeout: 10000, // Timeout de conexi√≥n de 10 segundos
        clean: true // Empezar con sesi√≥n limpia para evitar mensajes antiguos y problemas de estado
    });

    mqttClient.on('connect', () => {
        console.log(`[${getCurrentTimestamp()}] ‚úÖ Conectado a MQTT Server: ${mqttServer}:${mqttPort}`);
        isMqttConnected = true;
        // Limpiar suscripciones previas en memoria al conectar (ya que clean:true)
        subscribedTopics.clear();
        valueCounters.clear(); // Limpia contadores y cach√© de config
        console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Estado de suscripciones, contadores y cach√© limpiado debido a (re)conexi√≥n.`);
        // Suscribirse a los t√≥picos y cargar cach√© despu√©s de conectar
        synchronizeTopicsAndSubscriptions();
    });

    // Mover el manejador 'message' aqu√≠ para que se registre solo una vez
    mqttClient.on('message', async (topic, message) => {
        // console.log(`[${getCurrentTimestamp()}] ‚úÖ Mensaje recibido: T√≥pico: ${topic} | Datos: ${message.toString()}`);
        await processCallApi(topic, message.toString());
    });


    mqttClient.on('disconnect', (packet) => {
        console.log(`[${getCurrentTimestamp()}] üî¥ Desconectado de MQTT. Packet: ${packet}`);
        isMqttConnected = false;
        // No limpiar aqu√≠, esperar a la reconexi√≥n exitosa
    });

    mqttClient.on('error', (error) => {
        console.error(`[${getCurrentTimestamp()}] ‚ùå Error en la conexi√≥n MQTT: ${error.message}`);
        isMqttConnected = false;
    });

    mqttClient.on('reconnect', () => {
        console.log(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Intentando reconectar a MQTT...`);
    });

    mqttClient.on('close', () => {
        console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Conexi√≥n MQTT cerrada.`);
        isMqttConnected = false;
    });

    mqttClient.on('offline', () => {
        console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Cliente MQTT offline.`);
        isMqttConnected = false;
    });
}

async function connectToDatabase() {
    while (true) {
        try {
            // Si ya existe una conexi√≥n, intentar cerrarla primero
            if (dbConnection) {
                try {
                   await dbConnection.end();
                   console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Conexi√≥n DB anterior cerrada.`);
                } catch(closeErr) {
                   console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è No se pudo cerrar conexi√≥n DB anterior: ${closeErr.message}`);
                }
            }
            dbConnection = await mysql.createConnection(dbConfig);
            // Configurar listener para errores de conexi√≥n que ocurran despu√©s de conectar
            dbConnection.on('error', async (err) => {
                console.error(`[${getCurrentTimestamp()}] ‚ùå Error en la conexi√≥n DB: ${err.code}`);
                if (err.code === 'PROTOCOL_CONNECTION_LOST' || err.code === 'ECONNRESET' || err.code === 'ETIMEDOUT' || err.code === 'ERR_SOCKET_BAD_PORT') {
                    console.log(`[${getCurrentTimestamp()}] üîÑ Intentando reconectar a la base de datos...`);
                    isMqttConnected = false; // Mark as disconnected to avoid issues while DB is down
                    await connectToDatabase(); // Reintentar la conexi√≥n
                } else {
                     console.error(`[${getCurrentTimestamp()}] ‚ùå Error DB no recuperable detectado: ${err.message}. Deteniendo.`);
                     await shutdown(1); // Shutdown with error code
                }
            });
            console.log(`[${getCurrentTimestamp()}] ‚úÖ Conectado a la base de datos ${dbConfig.database}@${dbConfig.host}`);
            break; // Sale del bucle si la conexi√≥n es exitosa
        } catch (error) {
            console.error(`[${getCurrentTimestamp()}] ‚ùå Error conectando a la base de datos: ${error.message}`);
             if (error.code === 'ERR_SOCKET_BAD_PORT') {
                 console.error(`[${getCurrentTimestamp()}] ‚ùå Puerto DB (${dbConfig.port}) inv√°lido o no accesible. Verifique la configuraci√≥n. Deteniendo.`);
                 await shutdown(1); // Exit if port is wrong
             }
            console.log(`[${getCurrentTimestamp()}] üîÑ Reintentando conexi√≥n a DB en 5 segundos...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
    }
}

// --- MODIFICADO: Ahora obtiene toda la configuraci√≥n necesaria ---
async function getAllTopicsAndConfigsFromDB() { // Renamed for clarity
    if (!dbConnection || dbConnection.state === 'disconnected') {
        console.error(`[${getCurrentTimestamp()}] ‚ùå DB no conectada. No se pueden obtener t√≥picos y configs.`);
        await connectToDatabase();
    }
    try {
        // Selecciona todas las columnas necesarias para la cach√©
        const query = `
            SELECT id, mqtt_topic_modbus, rep_number, model_name,
                   variacion_number, conversion_factor, dimension_default
            FROM modbuses
            WHERE mqtt_topic_modbus IS NOT NULL AND mqtt_topic_modbus != ""
        `;
        const [rows] = await dbConnection.execute(query);

        const topicsConfigMap = new Map();
        rows.forEach(row => {
            // Validar rep_number antes de a√±adir
            const repNum = parseInt(row.rep_number, 10);
            if (row.mqtt_topic_modbus && !isNaN(repNum) && repNum >= 0) {
                // Almacena el objeto fila completo como configuraci√≥n
                topicsConfigMap.set(row.mqtt_topic_modbus, row);
            } else {
                console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è T√≥pico '${row.mqtt_topic_modbus}' omitido de la cach√©: rep_number inv√°lido ('${row.rep_number}') o falta t√≥pico.`);
            }
        });
        console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Obtenidas ${topicsConfigMap.size} configuraciones de t√≥picos desde DB.`);
        return topicsConfigMap;
    } catch (error) {
        console.error(`[${getCurrentTimestamp()}] ‚ùå Error en getAllTopicsAndConfigsFromDB: ${error.message}.`);
        if (error.code === 'PROTOCOL_CONNECTION_LOST' || error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT') {
            console.log(`[${getCurrentTimestamp()}] üîÑ Conexi√≥n DB perdida, intentando reconectar y reintentar consulta...`);
            await connectToDatabase();
            return getAllTopicsAndConfigsFromDB(); // Reintentar
        } else {
            console.error(`[${getCurrentTimestamp()}] ‚ùå Error SQL no recuperable: ${error.code}`);
            return new Map(); // Devolver mapa vac√≠o
        }
    }
}

// --- MODIFICADO: Ahora guarda la configuraci√≥n completa en valueCounters ---
async function synchronizeTopicsAndSubscriptions() {
    if (!isMqttConnected) {
        console.log(`[${getCurrentTimestamp()}] ‚ö†Ô∏è MQTT no conectado. Sincronizaci√≥n abortada.`);
        return;
    }
    if (!dbConnection || dbConnection.state === 'disconnected') {
        console.log(`[${getCurrentTimestamp()}] ‚ö†Ô∏è DB no conectada. Sincronizaci√≥n abortada.`);
        return;
    }

    console.log(`[${getCurrentTimestamp()}] üîÑ Sincronizando t√≥picos, suscripciones y cach√© de configuraci√≥n...`);
    const topicsConfigFromDB = await getAllTopicsAndConfigsFromDB(); // Obtiene Map(topic -> {id, rep_number, model_name...})
    const currentSubscribed = new Set(subscribedTopics); // Copia de t√≥picos actualmente suscritos en memoria

    // 1. Suscribirse a nuevos t√≥picos y actualizar/cachear config para existentes
    for (const [topic, dbConfig] of topicsConfigFromDB.entries()) { // dbConfig es ahora el objeto fila completo
        // repNum ya fue validado en getAllTopicsAndConfigsFromDB
        const repNum = parseInt(dbConfig.rep_number, 10);
        const calculatedRepNumber = repNum + 1; // El l√≠mite real (+1)

        if (!currentSubscribed.has(topic)) {
            // --- T√≥pico Nuevo ---
            mqttClient.subscribe(topic, { qos: 1 }, (err) => {
                if (err) {
                    console.error(`[${getCurrentTimestamp()}] ‚ùå Error al suscribirse al t√≥pico nuevo: ${topic} - ${err.message}`);
                } else {
                    console.log(`[${getCurrentTimestamp()}] ‚úÖ Suscrito y cacheado config para t√≥pico nuevo: ${topic} (repNumber=${calculatedRepNumber})`);
                    subscribedTopics.add(topic);
                    // Guardar estado inicial y la configuraci√≥n completa
                    valueCounters.set(topic, {
                        count: 0,
                        lastValue: null,
                        repNumber: calculatedRepNumber,
                        config: dbConfig // Guardar el objeto de configuraci√≥n completo
                    });
                }
            });
        } else {
            // --- T√≥pico Ya Suscrito ---
            const counterData = valueCounters.get(topic);
            let configUpdated = false;
            let repNumberUpdated = false;

            if (counterData) {
                 // Verificar si repNumber cambi√≥
                 if (counterData.repNumber !== calculatedRepNumber) {
                     console.log(`[${getCurrentTimestamp()}] üîÑ Actualizando repNumber para ${topic} de ${counterData.repNumber} a ${calculatedRepNumber}`);
                     counterData.repNumber = calculatedRepNumber;
                     repNumberUpdated = true;
                 }
                 // Verificar si la configuraci√≥n cacheada cambi√≥ (comparaci√≥n simple con JSON.stringify)
                 // Es suficiente si los cambios son raros y la estructura es consistente
                 if (JSON.stringify(counterData.config) !== JSON.stringify(dbConfig)) {
                      console.log(`[${getCurrentTimestamp()}] üîÑ Actualizando configuraci√≥n cacheada para ${topic}.`);
                      counterData.config = dbConfig; // Actualizar la cach√© de configuraci√≥n
                      configUpdated = true;
                 }

            } else {
                 // Estado inconsistente: suscrito pero sin datos en cach√©. Re-inicializar.
                 console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è T√≥pico ${topic} suscrito pero sin datos en cach√©. Re-inicializando.`);
                 valueCounters.set(topic, {
                     count: 0,
                     lastValue: null,
                     repNumber: calculatedRepNumber,
                     config: dbConfig
                 });
            }
            // Marcar como procesado (ya sea nuevo o existente verificado)
            currentSubscribed.delete(topic);
        }
    }

    // 2. Desuscribirse de t√≥picos que ya no est√°n en la DB (o eran inv√°lidos)
    for (const topic of currentSubscribed) {
        console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è T√≥pico ${topic} ya no est√° en la DB o es inv√°lido. Desuscribiendo y limpiando cach√©...`);
        mqttClient.unsubscribe(topic, (err) => {
            if (err) {
                console.error(`[${getCurrentTimestamp()}] ‚ùå Error al desuscribirse del t√≥pico: ${topic} - ${err.message}`);
            } else {
                console.log(`[${getCurrentTimestamp()}] ‚úÖ Desuscrito del t√≥pico: ${topic}`);
                subscribedTopics.delete(topic);
                valueCounters.delete(topic); // Eliminar su estado y cach√©
            }
        });
    }
    console.log(`[${getCurrentTimestamp()}] ‚úÖ Sincronizaci√≥n completada. T√≥picos activos: ${subscribedTopics.size}`);
}

// Funci√≥n para resetear contadores (sin cambios)
function resetAllRepetitionCounters() {
    // ... (igual que antes) ...
    const now = getCurrentTimestamp();
    console.log(`[${now}] ‚è∞ Ejecutando reseteo peri√≥dico de contadores de repetici√≥n...`);
    let resetCount = 0;
    for (const [topic, counterData] of valueCounters.entries()) {
        if (counterData.count !== 0) {
             counterData.count = 0;
             resetCount++;
        }
    }
    if (resetCount > 0) {
        console.log(`[${now}] ‚úÖ Contadores de repetici√≥n reseteados para ${resetCount} t√≥picos.`);
    } else {
        console.log(`[${now}] ‚úÖ No se necesitaron reseteos de contadores (todos estaban en 0).`);
    }
}

// --- MODIFICADO: Ahora usa la configuraci√≥n cacheada ---
async function processCallApi(topic, data) {
    // Comprobar si tenemos datos para este t√≥pico en la cach√©/contador
    if (!valueCounters.has(topic)) {
        console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Recibido mensaje para t√≥pico ${topic} pero no est√° en cach√©/contador (puede ser temporal tras reconexi√≥n). Ignorando.`);
        return;
    }

    const topicCounter = valueCounters.get(topic);

    // --- OBTENER CONFIG DESDE CACH√â ---
    const modbusConfig = topicCounter.config; // Obtener config desde memoria
    if (!modbusConfig) {
        // Esto indica un problema si llegamos aqu√≠, ya que valueCounters.has(topic) era true
        console.error(`[${getCurrentTimestamp()}] ‚ùå Error cr√≠tico: No se encontr√≥ configuraci√≥n en cach√© para ${topic}. Forzando sincronizaci√≥n.`);
        await synchronizeTopicsAndSubscriptions(); // Intentar arreglar el estado
        return;
    }
    // --- FIN OBTENER CONFIG DESDE CACH√â ---

    // --- YA NO SE NECESITA CONSULTA A DB AQU√ç ---

    // Procesar el mensaje (envuelto en try/catch para errores inesperados)
    try {
        // Parsear JSON (sin cambios)
        let parsedData;
        try {
            parsedData = JSON.parse(data);
            if (typeof parsedData.value === 'undefined' || (parsedData.value !== null && typeof parsedData.value !== 'number')) {
                 console.error(`[${getCurrentTimestamp()}] ‚ùå Mensaje JSON inv√°lido para ${topic}: "value" falta, no es n√∫mero o no es null. Data: ${data}`);
                 return;
            }
        } catch (e) {
            console.error(`[${getCurrentTimestamp()}] ‚ùå Error al parsear JSON para ${topic}: ${e.message}. Data: ${data}`);
            return;
        }

        const currentValue = parsedData.value;
        // Usar config de la cach√©
        const modelName = modbusConfig.model_name;

        // --- L√≥gica de Repetici√≥n y Variaci√≥n (Usa modbusConfig de la cach√©) ---
        let shouldCallApi = true;
         if (currentValue === null) {
             console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Valor recibido es null para ${topic}. Tratando como valor inv√°lido. No se llamar√° a API.`);
             shouldCallApi = false;
         } else if (modelName === 'weight') {
            // ... (l√≥gica usa modbusConfig.variacion_number, modbusConfig.conversion_factor) ...
             if (topicCounter.lastValue !== null) {
                if (currentValue === topicCounter.lastValue) {
                    topicCounter.count++;
                    console.log(`[${getCurrentTimestamp()}] üîÅ Valor repetido para ${topic}. Check: count(${topicCounter.count}) >= repNumber(${topicCounter.repNumber})? Valor: ${currentValue}`);
                    if (topicCounter.count >= topicCounter.repNumber) {
                        console.log(`[${getCurrentTimestamp()}] üö´ L√≠mite de repetici√≥n (${topicCounter.repNumber}) alcanzado/superado para ${topic}. No se llamar√° a la API.`);
                        shouldCallApi = false;
                    }
                } else {
                    const diff = Math.abs(currentValue - topicCounter.lastValue);
                    const variacionNumber = parseFloat(modbusConfig.variacion_number); // Desde cach√©
                    const conversionFactor = parseFloat(modbusConfig.conversion_factor) || 1; // Desde cach√©
                    const variacionInUnits = (!isNaN(variacionNumber) && !isNaN(conversionFactor)) ? variacionNumber * conversionFactor : 0;

                    console.log(`[${getCurrentTimestamp()}] ‚ÜîÔ∏è Valor cambiado para ${topic}. Nuevo: ${currentValue}, Anterior: ${topicCounter.lastValue}, Diff: ${diff.toFixed(3)}, Umbral: ${variacionInUnits.toFixed(3)}`);

                    if (variacionInUnits > 0 && diff > 0 && diff < variacionInUnits) {
                        console.log(`[${getCurrentTimestamp()}] üìâ Diferencia (${diff.toFixed(3)}) menor al umbral (${variacionInUnits.toFixed(3)}) para ${topic}. Se omite llamada a API y se mantiene valor anterior (${topicCounter.lastValue}).`);
                        parsedData.value = topicCounter.lastValue;
                        topicCounter.count++;
                         console.log(`[${getCurrentTimestamp()}] üîÅ Contador (por variaci√≥n m√≠nima) para ${topic}. Check: count(${topicCounter.count}) >= repNumber(${topicCounter.repNumber})?`);
                        if (topicCounter.count >= topicCounter.repNumber) {
                             console.log(`[${getCurrentTimestamp()}] üö´ L√≠mite de repetici√≥n (${topicCounter.repNumber}) alcanzado/superado (por variaci√≥n m√≠nima) para ${topic}. No se llamar√° a la API.`);
                             shouldCallApi = false;
                        }
                    } else {
                        console.log(`[${getCurrentTimestamp()}] ‚úÖ Diferencia significativa (o umbral 0) para ${topic}. Reseteando contador a 0.`);
                        topicCounter.count = 0;
                        topicCounter.lastValue = currentValue;
                    }
                }
            } else {
                console.log(`[${getCurrentTimestamp()}] ‚ú® Primer valor v√°lido recibido para ${topic}: ${currentValue}. Reseteando contador a 0.`);
                topicCounter.lastValue = currentValue;
                topicCounter.count = 0;
            }
        } else if (modelName === 'height') {
            // ... (l√≥gica usa modbusConfig.dimension_default desde cach√©) ...
             const dimensionDefault = parseFloat(modbusConfig.dimension_default); // Desde cach√©
             if (!isNaN(dimensionDefault) && currentValue >= dimensionDefault) {
                  console.log(`[${getCurrentTimestamp()}] üìè Valor ${currentValue} >= dimension_default (${dimensionDefault}) para ${topic}. No se llamar√° a la API.`);
                  shouldCallApi = false;
             } else {
                  if (topicCounter.lastValue !== null) {
                     if (currentValue === topicCounter.lastValue) {
                         topicCounter.count++;
                         console.log(`[${getCurrentTimestamp()}] üîÅ Valor repetido para ${topic} (height). Check: count(${topicCounter.count}) >= repNumber(${topicCounter.repNumber})? Valor: ${currentValue}`);
                         if (topicCounter.count >= topicCounter.repNumber) {
                             console.log(`[${getCurrentTimestamp()}] üö´ L√≠mite de repetici√≥n (${topicCounter.repNumber}) alcanzado/superado para ${topic} (height). No se llamar√° a la API.`);
                             shouldCallApi = false;
                         }
                     } else {
                         console.log(`[${getCurrentTimestamp()}] ‚úÖ Valor cambiado para ${topic} (height). Nuevo: ${currentValue}, Anterior: ${topicCounter.lastValue}. Reseteando contador a 0.`);
                         topicCounter.count = 0;
                         topicCounter.lastValue = currentValue;
                     }
                  } else {
                     console.log(`[${getCurrentTimestamp()}] ‚ú® Primer valor v√°lido recibido para ${topic} (height): ${currentValue}. Reseteando contador a 0.`);
                     topicCounter.lastValue = currentValue;
                     topicCounter.count = 0;
                  }
             }
        } else {
            // ... (l√≥gica b√°sica de repetici√≥n) ...
             if (topicCounter.lastValue !== null) {
                 if (currentValue === topicCounter.lastValue) {
                     topicCounter.count++;
                     console.log(`[${getCurrentTimestamp()}] üîÅ Valor repetido para ${topic} (otro). Check: count(${topicCounter.count}) >= repNumber(${topicCounter.repNumber})? Valor: ${currentValue}`);
                     if (topicCounter.count >= topicCounter.repNumber) {
                         console.log(`[${getCurrentTimestamp()}] üö´ L√≠mite de repetici√≥n (${topicCounter.repNumber}) alcanzado/superado para ${topic} (otro). No se llamar√° a la API.`);
                         shouldCallApi = false;
                     }
                 } else {
                     console.log(`[${getCurrentTimestamp()}] ‚úÖ Valor cambiado para ${topic} (otro). Nuevo: ${currentValue}, Anterior: ${topicCounter.lastValue}. Reseteando contador a 0.`);
                     topicCounter.count = 0;
                     topicCounter.lastValue = currentValue;
                 }
             } else {
                 console.log(`[${getCurrentTimestamp()}] ‚ú® Primer valor v√°lido recibido para ${topic} (otro): ${currentValue}. Reseteando contador a 0.`);
                 topicCounter.lastValue = currentValue;
                 topicCounter.count = 0;
             }
        }
        // --- Fin L√≥gica Repetici√≥n ---


        // Llamar a la API si es necesario (sin cambios)
        if (shouldCallApi) {
            const dataToSend = {
                id: modbusConfig.id, // Usar id desde cach√©
                data: parsedData
            };

            let apiUrl = process.env.LOCAL_SERVER || '';
            // ... (resto de la l√≥gica de llamada a API sin cambios) ...
             if (!apiUrl.startsWith('http://') && !apiUrl.startsWith('https://')) {
                 console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è LOCAL_SERVER no incluye protocolo (http/https). Asumiendo http.`);
                 apiUrl = 'http://' + apiUrl;
            }
            apiUrl = apiUrl.replace(/\/$/, '');
            apiUrl += '/api/modbus-process-data-mqtt';

            console.log(`[${getCurrentTimestamp()}] üöÄ Llamando a API: ${apiUrl} con datos para Modbus ID ${modbusConfig.id} (T√≥pico: ${topic})`);

            try {
                const response = await axios.post(apiUrl, dataToSend, { timeout: 10000 });
                console.log(`[${getCurrentTimestamp()}] ‚úÖ API OK para ${topic}. Status: ${response.status}. Respuesta: ${JSON.stringify(response.data)}`);
            } catch (apiError) {
                if (apiError.response) {
                    console.error(`[${getCurrentTimestamp()}] ‚ùå Error API (${apiError.response.status}) para ${topic}: ${JSON.stringify(apiError.response.data)}`);
                } else if (apiError.request) {
                    console.error(`[${getCurrentTimestamp()}] ‚ùå Error API para ${topic}: No se recibi√≥ respuesta o error de red. ${apiError.message}`);
                } else {
                    console.error(`[${getCurrentTimestamp()}] ‚ùå Error API para ${topic}: Error en configuraci√≥n de Axios. ${apiError.message}`);
                }
            }
        }

    } catch (error) {
         // Capturar errores inesperados durante el procesamiento del mensaje
         console.error(`[${getCurrentTimestamp()}] üí• Error procesando mensaje para ${topic}: ${error.message}`, error.stack);
    }
}

// Funci√≥n principal (sin cambios)
async function start() {
    console.log(`[${getCurrentTimestamp()}] ‚ñ∂Ô∏è Iniciando servicio MQTT Listener...`);
    await connectToDatabase();
    connectMQTT();

    const syncInterval = 60 * 1000;
    console.log(`[${getCurrentTimestamp()}] ‚è±Ô∏è Configurando intervalo de sincronizaci√≥n de t√≥picos y cach√© cada ${syncInterval / 1000} segundos.`);
    setIntervalAsync(async () => {
        if (isMqttConnected && dbConnection && dbConnection.state !== 'disconnected') {
            await synchronizeTopicsAndSubscriptions(); // Llama a la funci√≥n que ahora tambi√©n cachea
        } else {
             if (!isMqttConnected) console.log(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Sincronizaci√≥n peri√≥dica omitida: MQTT no conectado.`);
             if (!dbConnection || dbConnection.state === 'disconnected') console.log(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Sincronizaci√≥n peri√≥dica omitida: DB no conectada.`);
             if (!dbConnection || dbConnection.state === 'disconnected') {
                 console.log(`[${getCurrentTimestamp()}] üîå Intentando reconectar DB desde intervalo de sincronizaci√≥n...`);
                 await connectToDatabase();
             }
        }
    }, syncInterval);

    const resetIntervalMinutes = 20;
    const resetInterval = resetIntervalMinutes * 60 * 1000;
    console.log(`[${getCurrentTimestamp()}] ‚è±Ô∏è Configurando intervalo de reseteo de contadores cada ${resetIntervalMinutes} minutos.`);
    setInterval(() => {
        resetAllRepetitionCounters();
    }, resetInterval);


    console.log(`[${getCurrentTimestamp()}] ‚úÖ Servicio iniciado. Esperando mensajes MQTT.`);
}

// Manejo de cierre (sin cambios)
async function shutdown(exitCode = 0) {
    // ... (igual que antes) ...
    console.log(`[${getCurrentTimestamp()}] üî¥ Iniciando cierre ordenado (exit code ${exitCode})...`);
    if (shutdown.called) return;
    shutdown.called = true;
    try { if (mqttClient && mqttClient.connected) { console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Cerrando conexi√≥n MQTT...`); await new Promise((resolve, reject) => { const timeout = setTimeout(() => reject(new Error("MQTT close timeout")), 3000); mqttClient.end(true, { reasonString: 'Service shutting down' }, () => { clearTimeout(timeout); console.log(`[${getCurrentTimestamp()}] ‚úÖ Cliente MQTT desconectado.`); resolve(); }); }); } else if (mqttClient) { console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Cliente MQTT no conectado, no se necesita cerrar.`); } } catch (e) { console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Error al cerrar MQTT: ${e.message}`); }
    try { if (dbConnection && dbConnection.state !== 'disconnected') { console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Cerrando conexi√≥n DB...`); await dbConnection.end(); console.log(`[${getCurrentTimestamp()}] ‚úÖ Conexi√≥n DB cerrada.`); } else if (dbConnection) { console.log(`[${getCurrentTimestamp()}] ‚ÑπÔ∏è Conexi√≥n DB ya cerrada o no establecida.`); } } catch (e) { console.warn(`[${getCurrentTimestamp()}] ‚ö†Ô∏è Error al cerrar DB: ${e.message}`); }
    console.log(`[${getCurrentTimestamp()}] üëã Servicio detenido.`);
    process.exit(exitCode);
}
shutdown.called = false;

// Capturar se√±ales y errores (sin cambios)
process.on('SIGINT', () => shutdown(0));
process.on('SIGTERM', () => shutdown(0));
process.on('uncaughtException', (error, origin) => { console.error(`[${getCurrentTimestamp()}] üí• EXCEPCI√ìN NO CAPTURADA (${origin}): ${error.message}`, error.stack); shutdown(1); });
process.on('unhandledRejection', (reason, promise) => { console.error(`[${getCurrentTimestamp()}] üí• RECHAZO DE PROMESA NO MANEJADO:`, reason); shutdown(1); });

// Iniciar la aplicaci√≥n
start();
